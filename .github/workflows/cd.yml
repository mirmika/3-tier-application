name: CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the pipeline on push to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Set correct permissions on SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add EC2 to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy Docker Containers to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} /bin/bash << 'EOF'
          # Update and install Docker if needed
          if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
          else
              echo "Docker is already installed."
          fi
          
          # Ensure user has Docker permissions
          sudo usermod -aG docker ubuntu
          sudo systemctl restart docker

          # Remove existing containers (if any)
          sudo docker rm -f basic3tier-api || true
          sudo docker rm -f basic3tier-ui || true
          sudo docker rm -f my3tier-db || true
 
          # Run the database container (Postgres)
          sudo docker run -d --network my3tier-network --name my3tier-db \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=admin123 \
          -e POSTGRES_DB=basic3tier \
          -p 5432:5432 \
          postgres

          # Run the API container
          sudo docker run -d --network my3tier-network --name basic3tier-api \
          -p 5000:80 \
          -e "ConnectionStrings__Basic3Tier=Host=my3tier-db;Port=5432;Database=basic3tier;Username=postgres;Password=admin123" \
          mirmika/basic3tier-api:latest

          # Run the UI container
          sudo docker run -d --network my3tier-network --name basic3tier-ui \
          -p 80:80 \
          -e "API_URL=http://my3tier-api:5000/" \
          mirmika/basic3tier-ui:latest
          EOF

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Build and analyze with SonarQube
        shell: bash
        run: |
          dotnet-sonarscanner begin /k:"3-tier-application" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build ./api/Basic3Tier.Core/Basic3Tier.Core.csproj --configuration Release
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
