name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-and-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Build and test Backend API
      - name: Build and test Backend API
        run: |
          cd ./api
          docker build -t mirmika/basic3tier-api:latest . || exit 1
                
      # Build and test Frontend UI
      - name: Build and test Frontend UI
        run: |
          cd ./ui
          docker build -t mirmika/basic3tier-ui:latest . || exit 1
      
      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Push Docker Images to DockerHub
      - name: Push Docker Images to DockerHub
        run: |
          docker push mirmika/basic3tier-api:latest
          docker push mirmika/basic3tier-ui:latest
      
      # Set up JDK 17 for SonarQube analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Cache SonarQube packages
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Cache SonarQube scanner
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Install SonarScanner
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner

      # Build and analyze using SonarScanner
      - name: Build and analyze
        shell: bash
        run: |
          dotnet-sonarscanner begin /k:"3-tier-application" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build ./api/Basic3Tier.Core/Basic3Tier.Core.csproj --configuration Release
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
